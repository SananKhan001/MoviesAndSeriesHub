input AdminCreateRequest{
    name:String!,
    username:String!,
    password:String!,
}

input ViewerCreateRequest{
    name:String!,
    username:String!,
    password:String!,
}

input MovieCreateRequest{
    name:String!,
    genre:String!,
    description:String!,
    price:Int!
}

input SeriesCreateRequest {
    name:String!,
    genre:String!,
    description:String!,
    price:Int!
}

input JWTRequest{
    username:String!,
    password:String!
}

type JWTResponse{
    jwtToken:String!
}

type UserResponse{
    userId:ID,

    name:String,
    username:String,
    profileURL:String,
    authority:String
}

type MovieResponse{
    movieId:ID!,
    name:String!,
    genre:String!,
    description:String!,
    posterURL:String!,
    price:Int!,
    rating:Int!,
    createdAt:String!
}

type EpisodeResponse {
    episodeId:ID!,
    episodeName:String!,
    idInStreamDB:String!,
    posterURL:String!,
    createdAt:String!
}

type SeriesResponse {
    seriesId:ID!,
    name:String!,
    genre:String!,
    description:String!,
    posterURL:String!,
    price:Int!,
    rating:Int!
    createdAt:String!
}

type Mutation{
    # To create an ADMIN-ACCOUNT [Accessible by EVERYONE]
    signUpAdmin(adminCreateRequest:AdminCreateRequest!):UserResponse
    # To create a VIEWER-ACCOUNT [Only accessible by VIEWER]
    signUpViewer(viewerCreateRequest:ViewerCreateRequest!):UserResponse
    # To perform ADD operation on movies [Only accessible by ADMIN]
    addMovie(movieCreateRequest:MovieCreateRequest!):MovieResponse
    # To perform UPDATE operation on movies [Only accessible by ADMIN]
    updateMovie(movieCreateRequest:MovieCreateRequest!, movieId:ID!):MovieResponse
    # To perform DELETE operation on a movie [Only accessible by ADMIN]
    deleteMovie(movieId:ID!):Boolean

    # To ADD a episode in a movie [Only accessible by ADMIN]
    createEpisodeForMovie(episodeName:String!, movieId:ID!):EpisodeResponse
    # To ADD a episode in a series [Only accessible by ADMIN]
    addEpisodeInSeries(episodeName:String!, seriesId:ID!):EpisodeResponse
    # To UPDATE a episode [Only accessible by ADMIN]
    updateEpisodeName(episodeName:String!, episodeId:ID!):EpisodeResponse
    # To DELETE a episode [Only accessible by ADMIN]
    deleteEpisode(episodeId:ID!):Boolean

    # To ADD a series [Only accessible by ADMIN]
    addSeries(seriesCreateRequest:SeriesCreateRequest!):SeriesResponse
    # To UPDATE a series [Only accessible by ADMIN]
    updateSeries(seriesCreateRequest:SeriesCreateRequest!, seriesId:ID!):SeriesResponse
    # To DELETE a series [Only accessible by ADMIN]
    deleteSeries(seriesId:ID!):Boolean

    # To BUY a movie [Only accessible by VIEWER] TODO:: [REPAIR THIS DUMMY METHOD]
    buyMovie(movieId:ID!):String

    # To BUY a series [Only accessible by VIEWER] TODO:: [REPAIR THIS DUMMY METHOD]
    buySeries(seriesId:ID!):String
}

type Query{
    # To fetch all VIEWER in reverse of their creation date [Only accessible by ADMIN]
    allViewersInReverse(page:Int = 0, size:Int = 2):[UserResponse]
    # To fetch VIEWER by id [Only accessible by ADMIN]
    findViewerByUserId(userId:ID!):UserResponse
    # To fetch all ADMIN in reverse of their creation date [Only accessible by ADMIN]
    allAdminsInReverse(page:Int = 0, size:Int = 2):[UserResponse]
    # To fetch ADMIN by id [Only accessible by ADMIN]
    findAdminsByUserId(userId:ID!):UserResponse

    # To access currently loggedin VIEWER details [Only accessible by VIEWER]
    currentViewerDetails:UserResponse
    # To access currently loggedin ADMIN details [Only accessible by ADMIN]
    currentAdminDetails:UserResponse

    # To login and get JWT token [Accessible by EVERYONE]
    login(credentials:JWTRequest!):JWTResponse

    # To perform GET operation on a movie [Accessible by EVERYONE]
    getMovieById(movieId:ID!):MovieResponse
    # To GET all new released movies [Accessible by EVERYONE]
    getNewReleaseMoviesByGenre(genre:String!, page:Int = 0, size:Int = 2):[MovieResponse]

    # To GET a episode by ID [Accessible by VIEWER and ADMIN]
    getEpisodeById(episodeId:ID!):EpisodeResponse
    # To GET episode of a movie [Accessible by VIEWER and ADMIN]
    getEpisodeByMovieId(movieId:ID!):EpisodeResponse

    # To GET a series by ID [Accessible by EVERYONE]
    getSeriesById(seriesId:ID!):SeriesResponse
    # To GET all new released movies [Accessible by EVERYONE]
    getNewReleaseSeriesByGenre(genre:String!, page:Int = 0, size:Int = 2):[SeriesResponse]
    # To GET episodes of a series [Accessible by VIEWER and ADMIN]
    getEpisodesBySeriesId(seriesId:ID!):[EpisodeResponse]
}